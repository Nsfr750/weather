{
  "title": "Development Guide",
  "filename": "development.md",
  "content": "# Development Guide\n\nWelcome to the Weather App development guide. This document provides information for developers who want to contribute to the project.\n\n## Table of Contents\n- [Getting Started](#getting-started)\n- [Project Structure](#project-structure)\n- [Code Style](#code-style)\n- [Testing](#testing)\n- [Documentation](#documentation)\n- [Version Control](#version-control)\n- [Debugging](#debugging)\n- [Performance](#performance)\n- [New in v1.6.0](#new-in-v160)\n- [Contributing](#contributing)\n- [Troubleshooting](#troubleshooting)\n\n## Getting Started\n\n### Prerequisites\n\n- Python 3.10+\n- Git\n- pip (Python package manager)\n- Virtual environment (recommended)\n- Node.js 16+ (for frontend development)\n- PostgreSQL 13+ (for database development)\n\n### Setting Up the Development Environment\n\n1. **Fork and clone the repository**:\n   ```bash\n   git clone https://github.com/Nsfr750/weather.git\n   cd weather\n   ```\n\n2. **Set up Python virtual environment**:\n   ```bash\n   # Windows\n   python -m venv venv\n   .\\venv\\Scripts\\activate\n   \n   # Unix/macOS\n   python3 -m venv venv\n   source venv/bin/activate\n   ```\n\n3. **Install development dependencies**:\n   ```bash\n   pip install -r requirements-dev.txt\n   ```\n\n4. **Install pre-commit hooks**:\n   ```bash\n   pre-commit install\n   ```\n\n5. **Set up environment variables**:\n   ```bash\n   # Windows\n   copy .env.example .env\n   \n   # Unix/macOS\n   cp .env.example .env\n   ```\n   Then edit `.env` with your configuration.\n\n## Project Structure\n\n```\nweather/\n├── script/               # Main application code\n│   ├── api/             # API endpoints\n│   ├── tests/           # Test files\n│   ├── utils/           # Utility functions\n│   ├── __init__.py\n│   ├── config.py        # Configuration settings\n│   └── main.py          # Application entry point\n├── tests/               # Integration and end-to-end tests\n├── .env.example         # Example environment variables\n├── .gitignore\n├── .pre-commit-config.yaml\n├── LICENSE\n├── MANIFEST.in\n├── README.md\n├── requirements-dev.txt # Development dependencies\n└── setup.py\n```\n\n## Code Style\n\nWe follow [PEP 8](https://www.python.org/dev/peps/pep-0008/) with some additional guidelines:\n\n### Formatting\n\n- **Line Length**: 88 characters (Black's default)\n- **Indentation**: 4 spaces (no tabs)\n- **Quotes**: Double quotes for strings that will be shown to users, single quotes otherwise\n- **Imports**: Sorted and grouped (handled automatically by isort)\n\n### Tools\n\nWe use several tools to maintain code quality:\n\n- **Black**: Code formatting\n- **isort**: Import sorting\n- **flake8**: Linting\n- **mypy**: Static type checking\n- **pre-commit**: Git hooks\n\nRun all formatters and linters:\n\n```bash\npre-commit run --all-files\n```\n\nOr individually:\n\n```bash\nblack .\nisort .\nflake8\nmypy .\n```\n\n### Type Hints\n\n- Use type hints for all function signatures\n- Use `Optional[T]` instead of `Union[T, None]`\n- Use `List`, `Dict`, `Set`, `Tuple` from `typing` module\n- Use Python 3.10+ type union syntax: `str | None`\n\n### Docstrings\n\nFollow Google style docstrings:\n\n```python\ndef get_weather(location: str, days: int = 5) -> dict:\n    \"\"\"Get weather forecast for a location.\n\n    Args:\n        location: City name or coordinates (lat,lon)\n        days: Number of days to forecast (1-10)\n\n    Returns:\n        Dictionary containing weather data\n\n    Raises:\n        ValueError: If location is invalid\n        APIError: If weather data cannot be fetched\n    \"\"\"\n    # Implementation\n```\n\n## Testing\n\n### Running Tests\n\n```bash\n# Run all tests\npytest\n\n# Run a specific test file\npytest tests/test_weather.py\n\n# Run tests with coverage\npytest --cov=script tests/\n\n# Run tests in parallel\npytest -n auto\n```\n\n\n### Writing Tests\n\n- Place test files in the `tests/` directory\n- Name test files with `test_` prefix\n- Use descriptive test function names starting with `test_`\n- Group related tests in classes\n- Use fixtures for common test data\n\nExample test:\n\n```python\nimport pytest\nfrom script.weather import get_weather\n\n\nclass TestWeather:\n    @pytest.fixture\n    def sample_weather_data(self):\n        return {\"temperature\": 25, \"condition\": \"Sunny\"}\n\n    def test_get_weather_success(self, mocker, sample_weather_data):\n        # Mock the API call\n        mocker.patch(\n            \"script.weather._call_weather_api\",\n            return_value=sample_weather_data\n        )\n        \n        result = get_weather(\"London\")\n        assert result[\"temperature\"] == 25\n        assert result[\"condition\"] == \"Sunny\"\n\n    def test_get_weather_invalid_location(self):\n        with pytest.raises(ValueError, match=\"Invalid location\"):\n            get_weather(\"\")\n```\n\n\n### Test Coverage\n\nWe aim for at least 80% test coverage. Generate a coverage report:\n\n```bash\npytest --cov=script --cov-report=html\n```\n\nThen open `htmlcov/index.html` in your browser.\n\n\n## Documentation\n\n### Code Documentation\n\n- Document all public APIs with docstrings\n- Use type hints for better IDE support\n- Keep comments focused on \"why\" not \"what\"\n\n### API Documentation\n\nWe use Swagger/OpenAPI for API documentation. After starting the development server:\n\n1. Visit `/docs` for interactive API documentation\n2. Update `openapi.yaml` when adding new endpoints\n\n## Version Control\n\n### Branching Strategy\n\n- `main`: Production-ready code\n- `develop`: Integration branch for features\n- `feature/*`: New features\n- `bugfix/*`: Bug fixes\n- `release/*`: Release preparation\n\n### Commit Messages\n\nFollow [Conventional Commits](https://www.conventionalcommits.org/):\n\n```text\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\nTypes:\n\n- `feat`: A new feature\n- `fix`: A bug fix\n- `docs`: Documentation changes\n- `style`: Formatting, missing semicolons, etc.\n- `refactor`: Code change that neither fixes a bug nor adds a feature\n- `perf`: Performance improvements\n- `test`: Adding or modifying tests\n- `chore`: Changes to the build process or auxiliary tools\n\nExample:\n```text\nfeat(weather): add 10-day forecast support\n\nAdd support for fetching 10-day weather forecast from OpenWeatherMap API.\n\nCloses #123\n```\n\n\n## Debugging\n\n### VS Code\n\n1. Set breakpoints in your code\n2. Press F5 to start debugging\n3. Use the debug console to inspect variables\n\n### Command Line\n\n```bash\n# Start the development server with debugger\npython -m script.main --debug\n\n# Or use the built-in debugger\npython -m pdb -m script.main\n```\n\n### Logging\n\n```python\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef some_function():\n    try:\n        # Code that might fail\n        logger.debug(\"Debug information\")\n        logger.info(\"Information message\")\n        logger.warning(\"Warning message\")\n    except Exception as e:\n        logger.error(\"Error occurred\", exc_info=True)\n        raise\n```\n\n## Performance\n\n### Optimization Tips\n\n- Use `@lru_cache` for expensive function calls\n- Minimize API calls with proper caching\n- Use `asyncio` for I/O-bound operations\n- Profile before optimizing: `python -m cProfile -o profile.prof main.py`\n- Use `snakeviz` to visualize profiling results\n\n### Memory Management\n\n- Use generators for large datasets\n- Close file handles with `with` statements\n- Use `__slots__` for classes with many instances\n- Monitor memory usage with `memory_profiler`\n\n## New in v1.6.0\n\n### Markdown Documentation Viewer\n\nThe application now includes a built-in Markdown documentation viewer. Key components:\n\n- `MarkdownViewer` class in `script/md_viewer.py`\n- Supports syntax highlighting and table of contents\n- Handles internal and external links\n- Includes zoom functionality\n\n### Log Viewer\n\nA new log viewer has been added for better debugging:\n\n- Accessible from the Help menu\n- Supports log level filtering\n- Search functionality for finding specific entries\n- Copy to clipboard for sharing logs\n\n### Enhanced History System\n\nThe history system has been improved to include additional weather metrics:\n\n- New fields: feels_like, humidity, wind_speed, pressure, visibility\n- Backward compatible with existing history entries\n- Updated UI to display additional weather details\n\n### 7-Day Forecast\n\nThe forecast system has been extended to support 7 days:\n\n- Updated UI components to handle the additional days\n- Enhanced data processing for the extended forecast\n- Maintains backward compatibility with the previous 5-day format\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a pull request\n\n### Pull Request Guidelines\n\n- Keep PRs small and focused\n- Include tests for new features\n- Update documentation as needed\n- Ensure all tests pass\n- Follow the code style\n\n## Troubleshooting\n\n### Common Issues\n\n- **Dependency conflicts**: Try `pip install --upgrade -r requirements-dev.txt`\n- **Database issues**: Run `flask db upgrade`\n- **Cache problems**: Clear the cache directory or restart the application\n\n### Getting Help\n\n1. Check the [issues](https://github.com/Nsfr750/weather/issues)\n2. Search the documentation\n3. Ask for help on [Discord](https://discord.gg/ryqNeuRYjD)\n\n## License\n\nThis project is licensed under the GPLv3 License - see the [LICENSE](LICENSE) file for details.\n",
  "sections": [
    {
      "title": "Table of Contents",
      "content": "- [Getting Started](#getting-started)\n- [Project Structure](#project-structure)\n- [Code Style](#code-style)\n- [Testing](#testing)\n- [Documentation](#documentation)\n- [Version Control](#version-control)\n- [Debugging](#debugging)\n- [Performance](#performance)\n- [New in v1.6.0](#new-in-v160)\n- [Contributing](#contributing)\n- [Troubleshooting](#troubleshooting)"
    },
    {
      "title": "Getting Started",
      "content": "### Prerequisites\n\n- Python 3.10+\n- Git\n- pip (Python package manager)\n- Virtual environment (recommended)\n- Node.js 16+ (for frontend development)\n- PostgreSQL 13+ (for database development)\n\n### Setting Up the Development Environment\n\n1. **Fork and clone the repository**:\n   ```bash\n   git clone https://github.com/Nsfr750/weather.git\n   cd weather\n   ```\n\n2. **Set up Python virtual environment**:\n   ```bash\n   # Windows\n   python -m venv venv\n   .\\venv\\Scripts\\activate\n   \n   # Unix/macOS\n   python3 -m venv venv\n   source venv/bin/activate\n   ```\n\n3. **Install development dependencies**:\n   ```bash\n   pip install -r requirements-dev.txt\n   ```\n\n4. **Install pre-commit hooks**:\n   ```bash\n   pre-commit install\n   ```\n\n5. **Set up environment variables**:\n   ```bash\n   # Windows\n   copy .env.example .env\n   \n   # Unix/macOS\n   cp .env.example .env\n   ```\n   Then edit `.env` with your configuration."
    },
    {
      "title": "Project Structure",
      "content": "```\nweather/\n├── script/               # Main application code\n│   ├── api/             # API endpoints\n│   ├── tests/           # Test files\n│   ├── utils/           # Utility functions\n│   ├── __init__.py\n│   ├── config.py        # Configuration settings\n│   └── main.py          # Application entry point\n├── tests/               # Integration and end-to-end tests\n├── .env.example         # Example environment variables\n├── .gitignore\n├── .pre-commit-config.yaml\n├── LICENSE\n├── MANIFEST.in\n├── README.md\n├── requirements-dev.txt # Development dependencies\n└── setup.py\n```"
    },
    {
      "title": "Code Style",
      "content": "We follow [PEP 8](https://www.python.org/dev/peps/pep-0008/) with some additional guidelines:\n\n### Formatting\n\n- **Line Length**: 88 characters (Black's default)\n- **Indentation**: 4 spaces (no tabs)\n- **Quotes**: Double quotes for strings that will be shown to users, single quotes otherwise\n- **Imports**: Sorted and grouped (handled automatically by isort)\n\n### Tools\n\nWe use several tools to maintain code quality:\n\n- **Black**: Code formatting\n- **isort**: Import sorting\n- **flake8**: Linting\n- **mypy**: Static type checking\n- **pre-commit**: Git hooks\n\nRun all formatters and linters:\n\n```bash\npre-commit run --all-files\n```\n\nOr individually:\n\n```bash\nblack .\nisort .\nflake8\nmypy .\n```\n\n### Type Hints\n\n- Use type hints for all function signatures\n- Use `Optional[T]` instead of `Union[T, None]`\n- Use `List`, `Dict`, `Set`, `Tuple` from `typing` module\n- Use Python 3.10+ type union syntax: `str | None`\n\n### Docstrings\n\nFollow Google style docstrings:\n\n```python\ndef get_weather(location: str, days: int = 5) -> dict:\n    \"\"\"Get weather forecast for a location.\n\n    Args:\n        location: City name or coordinates (lat,lon)\n        days: Number of days to forecast (1-10)\n\n    Returns:\n        Dictionary containing weather data\n\n    Raises:\n        ValueError: If location is invalid\n        APIError: If weather data cannot be fetched\n    \"\"\"\n    # Implementation\n```"
    },
    {
      "title": "Testing",
      "content": "### Running Tests\n\n```bash\n# Run all tests\npytest\n\n# Run a specific test file\npytest tests/test_weather.py\n\n# Run tests with coverage\npytest --cov=script tests/\n\n# Run tests in parallel\npytest -n auto\n```\n\n\n### Writing Tests\n\n- Place test files in the `tests/` directory\n- Name test files with `test_` prefix\n- Use descriptive test function names starting with `test_`\n- Group related tests in classes\n- Use fixtures for common test data\n\nExample test:\n\n```python\nimport pytest\nfrom script.weather import get_weather\n\n\nclass TestWeather:\n    @pytest.fixture\n    def sample_weather_data(self):\n        return {\"temperature\": 25, \"condition\": \"Sunny\"}\n\n    def test_get_weather_success(self, mocker, sample_weather_data):\n        # Mock the API call\n        mocker.patch(\n            \"script.weather._call_weather_api\",\n            return_value=sample_weather_data\n        )\n        \n        result = get_weather(\"London\")\n        assert result[\"temperature\"] == 25\n        assert result[\"condition\"] == \"Sunny\"\n\n    def test_get_weather_invalid_location(self):\n        with pytest.raises(ValueError, match=\"Invalid location\"):\n            get_weather(\"\")\n```\n\n\n### Test Coverage\n\nWe aim for at least 80% test coverage. Generate a coverage report:\n\n```bash\npytest --cov=script --cov-report=html\n```\n\nThen open `htmlcov/index.html` in your browser."
    },
    {
      "title": "Documentation",
      "content": "### Code Documentation\n\n- Document all public APIs with docstrings\n- Use type hints for better IDE support\n- Keep comments focused on \"why\" not \"what\"\n\n### API Documentation\n\nWe use Swagger/OpenAPI for API documentation. After starting the development server:\n\n1. Visit `/docs` for interactive API documentation\n2. Update `openapi.yaml` when adding new endpoints"
    },
    {
      "title": "Version Control",
      "content": "### Branching Strategy\n\n- `main`: Production-ready code\n- `develop`: Integration branch for features\n- `feature/*`: New features\n- `bugfix/*`: Bug fixes\n- `release/*`: Release preparation\n\n### Commit Messages\n\nFollow [Conventional Commits](https://www.conventionalcommits.org/):\n\n```text\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\nTypes:\n\n- `feat`: A new feature\n- `fix`: A bug fix\n- `docs`: Documentation changes\n- `style`: Formatting, missing semicolons, etc.\n- `refactor`: Code change that neither fixes a bug nor adds a feature\n- `perf`: Performance improvements\n- `test`: Adding or modifying tests\n- `chore`: Changes to the build process or auxiliary tools\n\nExample:\n```text\nfeat(weather): add 10-day forecast support\n\nAdd support for fetching 10-day weather forecast from OpenWeatherMap API.\n\nCloses #123\n```"
    },
    {
      "title": "Debugging",
      "content": "### VS Code\n\n1. Set breakpoints in your code\n2. Press F5 to start debugging\n3. Use the debug console to inspect variables\n\n### Command Line\n\n```bash\n# Start the development server with debugger\npython -m script.main --debug\n\n# Or use the built-in debugger\npython -m pdb -m script.main\n```\n\n### Logging\n\n```python\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef some_function():\n    try:\n        # Code that might fail\n        logger.debug(\"Debug information\")\n        logger.info(\"Information message\")\n        logger.warning(\"Warning message\")\n    except Exception as e:\n        logger.error(\"Error occurred\", exc_info=True)\n        raise\n```"
    },
    {
      "title": "Performance",
      "content": "### Optimization Tips\n\n- Use `@lru_cache` for expensive function calls\n- Minimize API calls with proper caching\n- Use `asyncio` for I/O-bound operations\n- Profile before optimizing: `python -m cProfile -o profile.prof main.py`\n- Use `snakeviz` to visualize profiling results\n\n### Memory Management\n\n- Use generators for large datasets\n- Close file handles with `with` statements\n- Use `__slots__` for classes with many instances\n- Monitor memory usage with `memory_profiler`"
    },
    {
      "title": "New in v1.6.0",
      "content": "### Markdown Documentation Viewer\n\nThe application now includes a built-in Markdown documentation viewer. Key components:\n\n- `MarkdownViewer` class in `script/md_viewer.py`\n- Supports syntax highlighting and table of contents\n- Handles internal and external links\n- Includes zoom functionality\n\n### Log Viewer\n\nA new log viewer has been added for better debugging:\n\n- Accessible from the Help menu\n- Supports log level filtering\n- Search functionality for finding specific entries\n- Copy to clipboard for sharing logs\n\n### Enhanced History System\n\nThe history system has been improved to include additional weather metrics:\n\n- New fields: feels_like, humidity, wind_speed, pressure, visibility\n- Backward compatible with existing history entries\n- Updated UI to display additional weather details\n\n### 7-Day Forecast\n\nThe forecast system has been extended to support 7 days:\n\n- Updated UI components to handle the additional days\n- Enhanced data processing for the extended forecast\n- Maintains backward compatibility with the previous 5-day format"
    },
    {
      "title": "Contributing",
      "content": "1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a pull request\n\n### Pull Request Guidelines\n\n- Keep PRs small and focused\n- Include tests for new features\n- Update documentation as needed\n- Ensure all tests pass\n- Follow the code style"
    },
    {
      "title": "Troubleshooting",
      "content": "### Common Issues\n\n- **Dependency conflicts**: Try `pip install --upgrade -r requirements-dev.txt`\n- **Database issues**: Run `flask db upgrade`\n- **Cache problems**: Clear the cache directory or restart the application\n\n### Getting Help\n\n1. Check the [issues](https://github.com/Nsfr750/weather/issues)\n2. Search the documentation\n3. Ask for help on [Discord](https://discord.gg/ryqNeuRYjD)"
    },
    {
      "title": "License",
      "content": "This project is licensed under the GPLv3 License - see the [LICENSE](LICENSE) file for details."
    }
  ]
}