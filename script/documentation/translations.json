{
  "title": "Translation Guide",
  "filename": "translations.md",
  "content": "# Translation Guide\n\nThis guide explains how to add or modify translations in the Weather App. The application uses a comprehensive translation system that supports multiple languages and right-to-left (RTL) text direction.\n\n## Available Languages\n\nThe Weather App currently supports the following languages:\n\n| Language | Code | Native Name | RTL | Status |\n|----------|------|-------------|-----|--------|\n| English | en   | English     | No  | Complete |\n| Spanish | es   | Español     | No  | Complete |\n| French  | fr   | Français    | No  | Complete |\n| German  | de   | Deutsch     | No  | Complete |\n| Italian | it   | Italiano    | No  | Complete |\n| Portuguese | pt   | Português   | No  | Complete |\n| Russian | ru   | Русский     | No  | Complete |\n| Japanese | ja   | 日本語      | No  | Complete |\n| Korean  | ko   | 한국어      | No  | Complete |\n| Arabic  | ar   | اَلْعَرَبِيَّةُ | Yes | Complete |\n| Hebrew  | he   | עברית      | Yes | Complete |\n| Hungarian | hu  | Magyar      | No  | Complete |\n| Polish  | pl   | Polski      | No  | Complete |\n| Turkish | tr   | Türkçe      | No  | Complete |\n| Dutch   | nl   | Nederlands  | No  | Complete |\n| Chinese (Simplified) | zh | 简体中文   | No  | Complete |\n\n## Language Menu Implementation\n\nThe language menu automatically displays available languages using the following logic:\n\n1. It first tries to load language names from the current UI language's translation file\n2. If not found, it falls back to English names\n3. As a last resort, it uses a built-in dictionary of common language names\n\n### Language Name Keys\n\nEach translation file should include language names for all supported languages using the pattern `language_XX` where `XX` is the language code. For example:\n\n- `language_en`: \"English\"\n- `language_es`: \"Español\"\n- `language_fr`: \"Français\"\n\n### Menu Text\n\nEach translation file should also include these UI-specific keys:\n\n- `language_menu`: The menu title (e.g., \"Language\")\n- `language_tip`: Tooltip text for the language menu\n\n## Translation System\n\nThe translation system is based on JSON files and includes these features:\n\n- String interpolation with variables\n- Right-to-left (RTL) language support\n- Fallback to English for missing translations\n- Dynamic language switching without app restart\n- Optimized loading with translation memory\n\n### File Structure\n\n```text\nlang/\n├── __init__.py\n├── language_manager.py    # Core translation management\n└── translations/\n    ├── en.json           # English (base language)\n    ├── it.json           # Italian\n    ├── es.json           # Spanish\n    ├── fr.json           # French\n    ├── de.json           # German\n    ├── pt.json           # Portuguese\n    ├── ru.json           # Russian\n    ├── ja.json           # Japanese\n    ├── ko.json           # Korean\n    ├── zh.json           # Chinese (Simplified)\n    ├── ar.json           # Arabic (RTL)\n    ├── he.json           # Hebrew (RTL)\n    ├── hu.json           # Hungarian\n    ├── pl.json           # Polish\n    ├── tr.json           # Turkish\n    └── nl.json           # Dutch\n```\n\n## Adding a New Language\n\nTo add a new language:\n\n1. Add a new JSON file in `lang/translations/` with the language code (e.g., `fr.json` for French)\n2. Copy all keys from `en.json`\n3. Translate all values to the target language\n4. Add the language name in its own language (e.g., `\"language_fr\": \"Français\"`)\n5. Add the language to the language menu by including these keys:\n   - `language_menu`: The menu title (e.g., \"Language\")\n   - `language_tip`: Tooltip text for the language menu (e.g., \"Select application language\")\n\n## Best Practices\n\n1. **Consistency**\n   - Use consistent terminology throughout the app\n   - Maintain the same tone and style\n   - Follow the language's standard date/time/number formats\n\n2. **Variables**\n   - Use `{variable}` syntax for dynamic content\n   - Keep variables in the same position as the source language when possible\n   - Document expected variable types and formats\n\n3. **Pluralization**\n   - Use the `_plural` key for plural forms\n   - Follow the language's plural rules\n\n4. **Special Characters**\n   - Use proper Unicode characters for accented letters and symbols\n   - Ensure proper encoding (UTF-8)\n   - Test special characters on all platforms\n\n5. **Length Considerations**\n   - Account for text expansion (some languages are 30-40% longer than English)\n   - Keep UI elements flexible to accommodate different text lengths\n   - Test UI with the longest translations\n\n## Right-to-Left (RTL) Support\n\nFor RTL languages like Arabic and Hebrew:\n\n1. Set `is_rtl = True` in the language configuration\n2. The application will automatically:\n   - Mirror the UI layout\n   - Set text alignment to right\n   - Adjust scrollbars and other UI elements\n\n## Testing Translations\n\n1. **Visual Testing**\n   - Check for text overflow\n   - Verify proper alignment\n   - Test with different font sizes\n\n2. **Functional Testing**\n   - Test all UI elements with the target language\n   - Verify date, time, and number formatting\n   - Check RTL support if applicable\n\n3. **Automated Tests**\n   - Run the test suite with the new language\n   - Check for missing translations\n   - Verify variable substitution\n\n## Contributing Translations\n\n1. Fork the repository\n2. Create a new branch for your translation\n3. Add or update the translation files\n4. Submit a pull request with a clear description\n\n## Troubleshooting\n\n### Common Issues\n\n- **Missing Translations**: Fall back to English\n- **Text Overflow**: Adjust UI elements or shorten translations\n- **Special Characters**: Ensure proper encoding and font support\n\n## Getting Help\n\nFor translation issues, please open an issue on our [GitHub repository](https://github.com/yourusername/weather-app/issues).\n1. Join our [Discord](https://discord.gg/ryqNeuRYjD)\n2. Contact the maintainers"
}
